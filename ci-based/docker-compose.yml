version: '3.3'

networks:
  zeek-internal:
    driver: bridge

# These are created with
# docker volume create --driver local \
#    --opt type=none \
#    --opt device=/path/to/data \
#    --opt o=bind volume_name
volumes:
  test_data:
    external: true
  broker_test_data:
    external: true
  zeek_install_data:
    external: true
  app_spool_data:
    external: true

services:
  api:
    build:
      context: .
      dockerfile: containers/api.Dockerfile
    volumes:
      # The few things the API needs could
      # also come from the environment.
      - ./config.yml:/app/config.yml
    working_dir: /app
    entrypoint:
      - "/app/.venv/bin/gunicorn"
      - "--bind"
      - "0.0.0.0:8080"
      - "benchmarker:app"
    environment:
      - REDIS_HOST=redis
    ports:
      - "8080:8080"
    restart: always
    depends_on:
      - redis

  rq:
    # This is the RQ worker
    build:
      context: .
      dockerfile: containers/rq.Dockerfile
    volumes:
      - ./config.yml:/app/config.yml
      - /var/run/docker.sock:/var/run/docker.sock
      - app_spool_data:/app/spool

      # The metrics database.
      - ./metrics2.db:/app/metrics2.db

      # These files are needed to build and run the Zeek
      # containers for benchmark testing. We could make
      # some pieces either part of the configuration, or
      # put them in a separate directory at least?
      - ./docker-compose.yml:/app/docker-compose.yml:ro
      - ./zeek-seccomp.json:/app/zeek-seccomp.json:ro
      - ./Dockerfile:/app/Dockerfile:ro
      - ./scripts:/app/scripts:ro
      - ./random.seed:/app/random.seed:ro
    working_dir: /app
    entrypoint:
      - "/app/.venv/bin/rq"
      - "worker"
      - "-c"
      - "settings"
      - "-u"
      - "redis://redis"
    environment:
      # Let the RQ worker know the name of volume
      # backing its spool directory
      - SPOOL_VOLUME=app_spool_data
    restart: always
    depends_on:
      - redis

  redis:
    # Redis is accessed by api and rq.
    build:
      context: .
      dockerfile: containers/redis.Dockerfile

  test-http:
    # HTTP service for faster fetching local builds.
    image: python:3.11@sha256:cc7372fe4746ca323f18c6bd0d45dadf22d192756abc5f73e39f9c7f10cba5aa
    volumes:
      - ./testing/builds:/srv/builds
    working_dir: /srv/
    init: true
    entrypoint:
      - "python3"
      - "-m"
      - "http.server"
    restart: always



  zeek-base:
    container_name: zeek
    build:
      context: .
      dockerfile: Dockerfile
    cap_add:
      - SYS_NICE
    security_opt:
      - "seccomp:./zeek-seccomp.json"
    environment:
      - TMPFS_PATH=/mnt/data/tmpfs
      - ZEEKCPUS=${ZEEKCPUS}
      - ZEEKSEED=/benchmarker/random.seed
      - ZEEKBIN=/zeek/install/bin/zeek
      - DATA_FILE_NAME=${DATA_FILE_NAME:-}
      - BENCH_COMMAND=${BENCH_COMMAND:-}
      - BENCH_ARGS=${BENCH_ARGS:-}
    volumes:
      - test_data:/test_data:ro
      # - ./scripts:/benchmarker/scripts:ro
    tmpfs: /mnt/data/tmpfs
    networks:
      - zeek-internal
    command: /benchmarker/scripts/run-zeek.sh

  # Environment variables that need to be set in the host environment running docker-compose:
  # - BUILD_FILE_PATH
  #   if remote: set to path where $BUILD_FILE_NAME is stored
  #   if local: set to install path of zeek
  # - BUILD_FILE_NAME (if remote, set to blank if local)
  #   if remote: set to filename of tgz file with build
  #   if local: set to blank
  # - DATA_FILE_NAME
  zeek-remote:
    extends: zeek-base
    environment:
      - IS_LOCAL=0
      - BUILD_FILE_NAME=${BUILD_FILE_NAME}
    volumes:
      - ${BUILD_FILE_PATH}:/benchmarker/binaries:ro
      - zeek_install_data:/zeek/install

  zeek-local:
    extends: zeek-base
    environment:
      - IS_LOCAL=1
      - DATA_FILE_NAME=${DATA_FILE_NAME}
    volumes:
      - ${BUILD_FILE_PATH}:/benchmarker/zeek/install:ro

  broker-base:
    container_name: broker
    build:
      context: .
      dockerfile: Dockerfile
    cap_add:
      - SYS_NICE
    security_opt:
      - "seccomp:./zeek-seccomp.json"
    environment:
      - TMPFS_PATH=/mnt/data/tmpfs
      - DATA_FILE_NAME=${DATA_FILE_NAME}
    volumes:
      - broker_test_data:/test_data:ro
      - ./scripts:/benchmarker/scripts:ro
    tmpfs: /mnt/data/tmpfs
    command: /benchmarker/scripts/run-broker.sh

  # Environment variables that need to be set in the host environment running docker-compose:
  # - BUILD_FILE_PATH
  #   if remote: set to path where $BUILD_FILE_NAME is stored
  #   if local: set to install path of broker
  # - BUILD_FILE_NAME (if remote, set to blank if local)
  #   if remote: set to filename of tgz file with build
  #   if local: set to blank
  # - DATA_FILE_NAME
  broker-remote:
    extends: broker-base
    environment:
      - IS_LOCAL=0
      - BUILD_FILE_NAME=${BUILD_FILE_NAME}
    volumes:
      - ${BUILD_FILE_PATH}:/benchmarker/binaries:ro

  broker-local:
    extends: broker-base
    environment:
      - IS_LOCAL=1
      - DATA_FILE_NAME=${DATA_FILE_NAME}
    volumes:
      - ${BUILD_FILE_PATH}:/benchmarker/broker/install:ro
