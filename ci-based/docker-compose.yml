version: '3.3'

# The test_data volumes are created with
# docker volume create --driver local \
#    --opt type=none \
#    --opt device=/path/to/data \
#    --opt o=bind volume_name
#
# The zeek_install_data and app_spool_data
# do not need to be a bind-mount, but they
# do need to be external volumes.
volumes:
  test_data:
    external: true
  broker_test_data:
    external: true

  # build.tgz is extracted into this volume
  zeek_install_data:
    external: true

  # /app/spool volume bind-mounted into the
  # rq container.
  app_spool_data:
    external: true

services:
  api:
    build:
      context: .
      dockerfile: containers/api.Dockerfile
    volumes:
      # The few things the API needs could
      # also come from the environment.
      - ./config.yml:/app/config.yml

      # Allow the API access to the host machine's machine-id.
      - /etc/machine-id:/etc/machine-id

      - ./persistent:/app/persistent
    working_dir: /app
    entrypoint:
      - "/app/.venv/bin/gunicorn"
      - "--bind"
      - "0.0.0.0:8080"
      - "--access-logfile"
      - "-"
      - "benchmarker:app"
    environment:
      - REDIS_HOST=redis
    ports:
      - "8080:8080"
    restart: always
    depends_on:
      - redis

  rq:
    # This is the RQ worker
    build:
      context: .
      dockerfile: containers/rq.Dockerfile
    volumes:
      - ./config.yml:/app/config.yml
      - /var/run/docker.sock:/var/run/docker.sock
      - app_spool_data:/app/spool

      # A place to store persistent data (metrics database).
      - ./persistent:/app/persistent

      # These files are needed to run the Zeek benchmarking
      # containers for testing. We could make some pieces either
      # part of the configuration, or also just include it
      # in the worker's image.
      - ./zeek-seccomp.json:/app/zeek-seccomp.json:ro
    entrypoint:
      - "/app/.venv/bin/rq"
      - "worker"
      - "-c"
      - "zeek_benchmarker.rq_worker_settings"
      - "-u"
      - "redis://redis"
    environment:
      # Let the RQ worker know the name of volume
      # backing its spool directory
      - SPOOL_VOLUME=app_spool_data
    restart: always
    depends_on:
      - redis

  redis:
    # Redis is accessed by api and rq.
    build:
      context: .
      dockerfile: containers/redis.Dockerfile

  test-http:
    # HTTP service for faster fetching local builds.
    image: python:3.11@sha256:cc7372fe4746ca323f18c6bd0d45dadf22d192756abc5f73e39f9c7f10cba5aa
    volumes:
      - ./testing/builds:/srv/builds
    working_dir: /srv/
    init: true
    entrypoint:
      - "python3"
      - "-m"
      - "http.server"
    restart: always
